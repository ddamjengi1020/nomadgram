// npx prisma migrate save --name init --experimental >>> executing in prisma directory 
// npx prisma migrate up --experimental
// npx prisma generate


datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String  @id @default(uuid())
  userName  String  @unique
  email     String  @unique
  firstName String  @default("")
  lastName  String
  bio       String
  posts     Post[]
  likes     Like[] 
  comments  Comment[]
  followers User[] @relation("follow")
  following User[] @relation("follow")
  rooms     Room[] @relation(references: [id])
  fromMessage Message[] @relation("from")
  ToMessage Message[] @relation("to")
  loginSecret String?
  createAt  DateTime @default(now())
  updateAt  DateTime? @updatedAt()
}

model Post {
  id       String @id @default(uuid())
  location String?
  caption  String
  user     User @relation(fields: [userId], references: [id])
  userId   String
  likes    Like[]
  comments Comment[] 
  files    File[] 
  createAt  DateTime @default(now())
  updateAt  DateTime? @updatedAt()
}

model Like {
  id     String @id @default(uuid())
  user   User @relation(fields: [userId], references: [id])
  userId String
  post   Post @relation(fields: [postId], references: [id])
  postId String
  createAt  DateTime @default(now())
  updateAt  DateTime? @updatedAt()
}

model Comment {
  id     String @id @default(uuid())
  text   String
  user   User @relation(fields: [userId], references:[id])
  userId String
  post   Post @relation(fields: [postId], references: [id])
  postId String
  createAt  DateTime @default(now())
  updateAt  DateTime? @updatedAt()
}

model File {
  id     String @id @default(uuid())
  url    String
  post   Post @relation(fields: [postId], references: [id])
  postId String
  createAt  DateTime @default(now())
  updateAt  DateTime? @updatedAt()
}

model Room {
  id           String @id @default(uuid())
  participants User[] @relation(references: [id])
  messages     Message[]
  createAt  DateTime @default(now())
  updateAt  DateTime? @updatedAt()
}

model Message {
  id     String @id @default(uuid())
  text   String
  from   User @relation("from", fields:[fromUserId], references: [id])
  fromUserId String
  to     User @relation("to", fields: [toUserId], references: [id])
  toUserId String
  room   Room @relation(fields: [roomId], references:[id])
  roomId String
  createAt  DateTime @default(now())
  updateAt  DateTime? @updatedAt()
}
